const url = new URL(window.location.href),
    params = new URLSearchParams(url.search),
    id = params.get("id");
let channels = {},
    channel = {},
    epg = {},
    container = document.getElementById("container");

function extractTimeAndDate(e) {
    const t = e.match(/^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2}) \+\d{4}$/);
    if (t) {
        const e = t[1],
            n = t[2],
            a = t[3],
            o = parseInt(t[4], 10),
            r = parseInt(t[5], 10),
            i = t[6],
            s = new Date(Date.UTC(e, n - 1, a, o, r, i));
        s.setUTCHours(s.getUTCHours() + 5), s.setUTCMinutes(s.getUTCMinutes() + 30);
        const c = s.toISOString().split("T")[0];
        let l = s.getUTCHours();
        const d = String(s.getUTCMinutes()).padStart(2, "0"),
            g = String(s.getUTCSeconds()).padStart(2, "0"),
            h = l >= 12 ? "PM" : "AM";
        l = l % 12 || 12;
        return {
            time: `${String(l).padStart(2,"0")}:${d}:${g} ${h}`,
            date: c
        }
    }
    throw new Error("Invalid datetime format")
}

function convertDateFormat(e) {
    return e.slice(0, 4) + e.slice(4, 6) + e.slice(6, 8) + "T" + e.slice(8, 10) + e.slice(10, 12) + e.slice(12, 14)
}

function addDays(e, t) {
    var n = e.slice(0, 4),
        a = e.slice(4, 6),
        o = e.slice(6, 8),
        r = e.slice(9, 11),
        i = e.slice(11, 13),
        s = e.slice(13, 15),
        c = new Date(n, a - 1, o, r, i, s),
        l = new Date(c);
    return l.setDate(l.getDate() + t), `${l.getFullYear()}${("0"+(l.getMonth()+1)).slice(-2)}${("0"+l.getDate()).slice(-2)}T${("0"+l.getHours()).slice(-2)}${("0"+l.getMinutes()).slice(-2)}${("0"+l.getSeconds()).slice(-2)}`
}
async function initApp() {
    if (await checkIfUpdateNeeded()) localStorage.setItem("previousPage", window.location.href), window.location.href = "update.html";
    else {
        document.getElementById("spinner").style.display = "block";
        try {
            channels = JSON.parse(localStorage.getItem("cachedChannels")) || [];
            const e = await openDatabase();
            epg = await fetchEPGData(e) || {}, await changeData(), play()
        } catch (e) {
            console.error("Initialization error:", e), document.getElementById("error").style.display = "block", document.getElementById("error").textContent = "Failed to load data. Please try again later."
        } finally {
            document.getElementById("spinner").style.display = "none"
        }
    }
}
async function checkIfUpdateNeeded() {
    try {
        const e = await fetch("https://db.jarviz.site/jarviz-tv/version.txt");
        if (!e.ok) throw new Error("Failed to fetch version");
        const t = await e.text();
        return localStorage.getItem("cachedVersion") !== t
    } catch (e) {
        throw console.error("Failed to check version:", e), e
    }
}
async function fetchChannels() {
    try {
        const e = await fetch("https://db.jarviz.site/jarviz-tv/channels.json");
        if (!e.ok) throw new Error("Failed to fetch channels");
        const t = await e.json(),
            n = await fetch("https://db.jarviz.site/jarviz-tv/custom_channels.json");
        if (!n.ok) throw new Error("Failed to fetch custom channels");
        const a = await n.json(),
            o = {
                ...t,
                ...a
            },
            r = Object.values(o);
        localStorage.setItem("cachedChannels", JSON.stringify(r))
    } catch (e) {
        throw console.error("Failed to fetch channels:", e), e
    }
}
async function changeData() {
    channel = channels.find((e => e.id === id)), epg = epg[`ts${id}`]
}
async function fetchEPG(e) {
    try {
        const t = await fetch("https://db.jarviz.site/jarviz-tv/epg.json");
        if (!t.ok) throw new Error("Failed to fetch EPG");
        epg = await t.json(), await storeEPGData(e, epg)
    } catch (e) {
        throw console.error("Failed to fetch EPG:", e), e
    }
}

function getNowPlaying() {
    const e = new Date;
    if (!epg) return {
        title: "Unknown"
    };
    for (const t of epg) {
        const n = new Date(t.start.replace(/(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2}).*/, "$1-$2-$3T$4:$5:$6Z")),
            a = new Date(t.stop.replace(/(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2}).*/, "$1-$2-$3T$4:$5:$6Z"));
        if (e >= n && e < a) return t
    }
    return {
        title: "Unknown"
    }
}

function play() {
    const e = getNowPlaying(),
        t = checkIfFavorited(channel.id) ? '<button id="favoriteBtn" class="btn btn-danger" type="button">Remove from Favorite</button>' : '<button id="favoriteBtn" class="btn btn-success" type="button">Add to Favorite</button>',
        n = `\n        <title>${channel.name}</title>\n        <div id="jwplayerDiv" class="jwplayerDiv" style="border-radius: 15px;"></div>\n        <div class="now-playing" style="margin-top: 20px; display: flex; align-items: center; background-color: #f9f9f9; padding: 10px; border-radius: 10px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">\n            
        <h2 id="now" style="margin: 0; font-size: 1.2rem; font-weight: 500; color: #333;">Now Playing: ${e.title}</h2>\n        </div>\n        <div class="now-playing channel-info" style="margin-top: 20px; background-color: #f9f9f9; padding: 10px; border-radius: 10px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); display: flex; align-items: center;">\n            <img id="logo" src="https://tv.jarviz.site/assets/img/logo_81/ts${channel.id}.webp" alt="Channel Logo" style="height: 60px; width: 60px; border-radius: 50%; margin-right: 20px; border: 3px solid #4e54c8;" />\n           
        <h2 id="channel" style="margin: 0; font-size: 1.2rem; font-weight: 500; color: #333;">${channel.name}</h2>\n        </div>\n        <div class="now-playing" style="margin-top: 20px;display: flex;align-items: center;background-color: #f9f9f9;padding: 10px;border-radius: 10px;box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">\n        ${t}\n        </div>`;
    container.innerHTML = n, document.getElementById("favoriteBtn").addEventListener("click", handleFavorite), setupPlayer(e)
}

function setupPlayer(e) {
    const t = convertDateFormat(e.start),
        n = addDays(convertDateFormat(e.stop), 5),
        a = {
            file: channel.url,
            title: channel.name,
            autostart: !0,
            stretching: "exactfit",
            width: "100%",
            aspectRatio: "16:9",
            type: channel.type,
            logo: {
                file: "https://raw.githubusercontent.com/tvtelugu/play/main/images/TVTELUGU-B.pngassets/img/logo.png",
                hide: "false",
                position: "bottom-left",
                margin: 2,
                width: "auto",
                height: "25px"
            }
        };
    channel.drm && (a.drm = {
        clearkey: {
            keyId: channel.keyId,
            key: channel.key
        }
    }, a.file = `${channel.url}?begin=${t}&end=${n}`);
    const o = jwplayer("jwplayerDiv").setup(a);
    o.on("ready", (function() {
        setTimeout((function() {
            o.setFullscreen(!0)
        }), 5e3)
    })), o.on("error", (function() {
        console.error("An error occurred while setting up the player.")
    }))
}

function handleFavorite() {
    let e = JSON.parse(localStorage.getItem("favoriteChannels")) || [];
    if (e.some((e => e.id === channel.id))) {
        confirm("This channel is already favorited. Do you want to remove it from favorites?") && (e = e.filter((e => e.id !== channel.id)), localStorage.setItem("favoriteChannels", JSON.stringify(e)), window.location.reload())
    } else e.push(channel), localStorage.setItem("favoriteChannels", JSON.stringify(e)), window.location.reload()
}

function checkIfFavorited(e) {
    return (JSON.parse(localStorage.getItem("favoriteChannels")) || []).some((t => t.id === e))
}

function openDatabase() {
    return new Promise(((e, t) => {
        const n = indexedDB.open("EPGDatabase", 1);
        n.onerror = e => t(e.target.error), n.onsuccess = t => e(t.target.result), n.onupgradeneeded = e => {
            e.target.result.createObjectStore("epg", {
                keyPath: "id"
            })
        }
    }))
}

function storeEPGData(e, t) {
    return new Promise(((n, a) => {
        const o = e.transaction("epg", "readwrite");
        o.objectStore("epg").put({
            id: "epgData",
            data: t
        }), o.oncomplete = () => n(), o.onerror = e => a(e.target.error)
    }))
}

function fetchEPGData(e) {
    return new Promise(((t, n) => {
        const a = e.transaction("epg", "readonly").objectStore("epg").get("epgData");
        a.onsuccess = e => t(e.target.result ? e.target.result.data : null), a.onerror = e => n(e.target.error)
    }))
}
document.addEventListener("DOMContentLoaded", (() => {
    initApp()
}));