const url = new URL(window.location.href),
    params = new URLSearchParams(url.search),
    id = params.get("id");
let channels = {},
    channel = {},
    epg = [],
    container = document.getElementById("container");
async function initApp() {
    if (await checkIfUpdateNeeded()) localStorage.setItem("previousPage", window.location.href), window.location.href = "update.html";
    else {
        document.getElementById("spinner").style.display = "block";
        try {
            channels = JSON.parse(localStorage.getItem("cachedChannels")) || [];
            const e = await openDatabase();
            epg = await fetchEPGData(e) || {}, await changeData(), generateEpg()
        } catch (e) {
            console.error("Initialization error:", e), document.getElementById("error").style.display = "block", document.getElementById("error").textContent = "Failed to load data. Please try again later."
        } finally {
            document.getElementById("spinner").style.display = "none"
        }
    }
}
async function checkIfUpdateNeeded() {
    try {
        const e = await fetch("https://db.jarviz.site/jarviz-tv/version.txt");
        if (!e.ok) throw new Error("Failed to fetch version");
        const t = await e.text();
        return localStorage.getItem("cachedVersion") !== t
    } catch (e) {
        throw console.error("Failed to check version:", e), e
    }
}
async function changeData() {
    channel = channels.find((e => e.id === id)), epg = epg[`ts${id}`], epg = epg.map((e => ({
        ...e,
        start: convertToIST(e.start),
        stop: convertToIST(e.stop)
    })))
}

function convertToIST(e) {
    const t = e.slice(0, 14),
        a = parseInt(t.substring(0, 4), 10),
        n = parseInt(t.substring(4, 6), 10) - 1,
        r = parseInt(t.substring(6, 8), 10),
        s = parseInt(t.substring(8, 10), 10),
        i = parseInt(t.substring(10, 12), 10),
        o = parseInt(t.substring(12, 14), 10),
        c = new Date(Date.UTC(a, n, r, s, i, o)),
        l = new Date(c.getTime() + 198e5),
        d = e => String(e).padStart(2, "0");
    return l.getUTCFullYear() + d(l.getUTCMonth() + 1) + d(l.getUTCDate()) + d(l.getUTCHours()) + d(l.getUTCMinutes()) + d(l.getUTCSeconds()) + " +0530"
}

function convertToUTC(e) {
    const t = e.slice(0, 14),
        a = parseInt(t.substring(0, 4), 10),
        n = parseInt(t.substring(4, 6), 10) - 1,
        r = parseInt(t.substring(6, 8), 10),
        s = parseInt(t.substring(8, 10), 10),
        i = parseInt(t.substring(10, 12), 10),
        o = parseInt(t.substring(12, 14), 10),
        c = new Date(Date.UTC(a, n, r, s, i, o)),
        l = new Date(c.getTime() - 198e5),
        d = e => String(e).padStart(2, "0");
    return l.getUTCFullYear() + d(l.getUTCMonth() + 1) + d(l.getUTCDate()) + d(l.getUTCHours()) + d(l.getUTCMinutes()) + d(l.getUTCSeconds()) + " +0000"
}

function adjustTiming(e, t) {
    const a = e.slice(0, 14),
        n = parseInt(a.slice(0, 4), 10),
        r = parseInt(a.slice(4, 6), 10) - 1,
        s = parseInt(a.slice(6, 8), 10),
        i = parseInt(a.slice(8, 10), 10),
        o = parseInt(a.slice(10, 12), 10),
        c = parseInt(a.slice(12, 14), 10),
        l = new Date(Date.UTC(n, r, s, i, o, c));
    l.setMinutes(l.getMinutes() + t);
    const d = e => String(e).padStart(2, "0");
    return l.getUTCFullYear() + d(l.getUTCMonth() + 1) + d(l.getUTCDate()) + "T" + d(l.getUTCHours()) + d(l.getUTCMinutes()) + d(l.getUTCSeconds())
}

function getdatetime(e) {
    const t = e.slice(0, 14),
        a = parseInt(t.slice(0, 4), 10),
        n = parseInt(t.slice(4, 6), 10) - 1,
        r = parseInt(t.slice(6, 8), 10),
        s = parseInt(t.slice(8, 10), 10),
        i = parseInt(t.slice(10, 12), 10),
        o = parseInt(t.slice(12, 14), 10),
        c = new Date(Date.UTC(a, n, r, s, i, o)),
        l = c.getUTCHours() % 12 || 12,
        d = c.getUTCHours() >= 12 ? "PM" : "AM",
        g = l + ":" + String(c.getUTCMinutes()).padStart(2, "0") + " " + d;
    return {
        date: String(c.getUTCDate()).padStart(2, "0") + "-" + String(c.getUTCMonth() + 1).padStart(2, "0") + "-" + c.getUTCFullYear(),
        time: g
    }
}

function generateEpg() {
    let e = "",
        t = `<div class="channel-header">\n    <img src="https://tv.jarviz.site/assets/img/logo_81/ts${channel.id}.webp" alt="${channel.name}">\n    <h1>${channel.name}</h1>\n</div>`;
    const a = convertToIST((new Date).toISOString().replace(/[-:T.]/g, "").slice(0, 14) + " +0000"),
        n = epg.filter((e => e.stop < a));
    n.sort(((e, t) => {
        const a = new Date(e.start).getTime();
        return new Date(t.start).getTime() - a
    })), n.forEach((a => {
        const n = a.start.slice(0, 8);
        n !== e && ("" !== e && (t += "</ul>"), e = n, t += `<li></div></li>\n            <div class="epg-date">${e.slice(0,4)}-${e.slice(4,6)}-${e.slice(6,8)}</div><ul class="epg-list">`);
        const r = getdatetime(a.start),
            s = getdatetime(a.stop);
        t += `\n            <li>\n                <div class="epg-details">\n                    <div class="epg-title">${a.title}</div>\n                    <div class="epg-time">${r.time} - ${s.time}</div>\n                </div>\n                <button class="watch-btn" onclick='watchProgram("${a.start}", "${a.stop}", "${a.title}")'>Watch</button>\n            </li>`
    })), "" !== t && (t += '<div id="frame" style="width: 100%;"></div></ul>'), container.innerHTML = t
}

function watchProgram(e, t, a) {
    e = convertToUTC(e), t = convertToUTC(t), window.location.href = `/past_player.html?id=${channel.id}&start=${adjustTiming(e,-5)}&stop=${adjustTiming(t,5)}&title=${a}`
}

function openDatabase() {
    return new Promise(((e, t) => {
        const a = indexedDB.open("EPGDatabase", 1);
        a.onerror = e => t(e.target.error), a.onsuccess = t => e(t.target.result), a.onupgradeneeded = e => {
            e.target.result.createObjectStore("epg", {
                keyPath: "id"
            })
        }
    }))
}

function fetchEPGData(e) {
    return new Promise(((t, a) => {
        const n = e.transaction("epg", "readonly").objectStore("epg").get("epgData");
        n.onsuccess = e => t(e.target.result ? e.target.result.data : null), n.onerror = e => a(e.target.error)
    }))
}
document.addEventListener("DOMContentLoaded", (() => {
    initApp()
}));